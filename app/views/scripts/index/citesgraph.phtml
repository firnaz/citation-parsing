{include file="header.phtml"}
<div id="content">
  <div class="row-fluid header_bar">
    <div class="container some_padding">
      <div class="header" id="header">
        <a id="header_logo" href="{$_URL}" alt="{$_TITLE}"><h4>{$_TITLE}</h4></a>
        <div class="header_search_tabs">
          <div class="clear"></div>
        </div>
        <div class="header_search ac_header">
          <form class="header_search_inner" id="search_form">
            <a href="#" id="header_search_submit"><span data-icon="w" aria-hidden="true" class="search_icon"></span></a>
            <div class="header_search_input_wrapper">
              <input type="text" placeholder="Kata pencarian" value="{$page.query}" id="search_input">
              <input type="hidden" id="searchFlagInput">
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <div id="static-page">
    <div class="title">Grafik Sitasi dari {$page.author.NamaPengarang}</div>
    <div id="headerGraph"></div>
    <div id="leftSideBarGraph">
      <p><a href="pengarang?id={$page.author.ID}">Detail Informasi Penulis</a></p>
      <p>Daftar Publikasi</p>
      <ul>
        {foreach from=$page.documents item=item}
        <li><a href="dokumen?id={$item.ID}">{$item.judul|truncate:80}({$item.tahun})</a></li>
        {/foreach}
      </ul>
    </div>
    <div id="rightSideBarGraph"></div>
    <div id="graph">
      <div id="MaskingGraph"><div>Loading...</div></div>
      <div class="toolbar">
        <div class="button">
            <input type="radio" name="filtergraph" id="btn1" value="0" checked>
            <label for="btn1" unselectable>Seluruhnya</label>
        </div>
        <div class="button">
            <input type="radio" name="filtergraph" value="2" id="btn2" >
            <label for="btn2" unselectable>Dirujuk</label>
        </div>
        <div class="button">
            <input type="radio" name="filtergraph" value="1" id="btn3" >
            <label for="btn3" unselectable>Merujuk</label>
        </div>
      </div>
      <div id="citesgraph"></div>
      <div id="footerGraph">
        <div id="legend">
          <ul>
            <li id="author-legend"><div class="author-legend">&nbsp;</div> {$page.author.NamaPengarang}</li>
            <li><img src="assets/images/citation-graph-legend.png"/> A merujuk B</li>
          </ul>
        </div>
        <!-- div id="DownloadGraph"><a href="#">Download</a></div -->
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  // var json = [
  //   {  
  //     "adjacencies": [
  //       {
  //         "nodeTo": "graphnode20",
  //         "nodeFrom": "graphnode20",
  //         "type":"double_arrow",
  //         "data": {  
  //           "$color": "#557EAA"  
  //         }
  //       }
  //     ],  
  //     "data": {  
  //       "$color": "#70A35E",  
  //       "$type": "circle",  
  //       "$dim": 8  
  //     },  
  //     "id": "graphnode19",  
  //     "name": "graphnode19"  
  //   }, {  
  //     "adjacencies": [],  
  //     "data": {  
  //       "$color": "#C74243",  
  //       "$type": "star",  
  //       "$dim": 8  
  //     },  
  //     "id": "graphnode20",  
  //     "name": "graphnode20"  
  //   } 
  // ];
  var json = [
    {ldelim}
      {if $page.authordumps}        
        adjacencies:[
          {foreach from=$page.authordumps item=item}
            {ldelim}
              "nodeTo": "node{$item.ID}",
              "nodeFrom": "node{$page.author.ID}",
              "data": {ldelim}
                  "$color": defaultlinecolor
              {rdelim},
            {rdelim},
          {/foreach}
        ],
      {else}
        adjacencies:[],
      {/if}  
      "data": {ldelim}
          tipe:0,
          "$color": "#69C7EC",  
          "$type": "square",  
          "$dim": 10,
          "$label-size":14,
          "$label-color":"#FF0000",          
          to:[
          {foreach from=$page.author.to item=item}
            "{$item}",
          {/foreach}
          ],
          from:[
          {foreach from=$page.author.from item=item}
            "{$item}",
          {/foreach}
          ]
      {rdelim},
      "id": "node{$page.author.ID}",  
      "name": "{$page.author.NamaPengarang}" 
    {rdelim}
    {if $page.authordumps}
      {foreach from=$page.authordumps item=item}
        ,{ldelim}
          adjacencies:[
          {foreach from=$item.children item=item2}
            {ldelim}
              "nodeTo": "node{$item2.ID}",
              "nodeFrom": "node{$item.ID}",
              "data": {ldelim}
                  "$color": defaultlinecolor
              {rdelim}
            {rdelim},
          {/foreach}
          ],
          "data": {ldelim}
            "$color": "#C34918",
            "$type": "square",  
            "$dim": 8,  
            "tipe" : "{$item.type}",
            to:[
            {foreach from=$item.to item=item2}
              "{$item2}",
            {/foreach}
            ],
            from:[
            {foreach from=$item.from item=item2}
              "{$item2}",
            {/foreach}
            ]
          {rdelim},
          "id": "node{$item.ID}",  
          "name": "{$item.NamaPengarang}",
        {rdelim}
      {/foreach}
    {/if}
    {if $page.noChildrenNodes}
      {foreach from=$page.noChildrenNodes item=item}
        ,{ldelim}
          adjacencies:[],
          "data": {ldelim}
            "$color": "#C34918",
            "$type": "square",  
            "$dim": 8,  
            "tipe" : "{$item.type}" 
          {rdelim},
          "id": "node{$item.ID}",  
          "name": "{$item.NamaPengarang}",
        {rdelim}
      {/foreach}
    {/if}
  ];
  var root = "node{$page.author.ID}";
  {literal}
  var fd = new $jit.ForceDirected({  
    //id of the visualization container  
    injectInto: 'citesgraph',
    //Enable zooming and panning  
    //by scrolling and DnD  
    Navigation: {  
      enable: true,  
      //Enable panning events only if we're dragging the empty  
      //canvas (and not a node).  
      panning: 'avoid nodes',  
      zooming: 10 //zoom speed. higher is more sensible  
    },  
    // Change node and edge styles such as  
    // color and width.  
    // These properties are also set per node  
    // with dollar prefixed data-properties in the  
    // JSON structure.  
    Node: {  
      overridable: true  
    },  
    Edge: {  
      type:"double_arrow",
      overridable: true,
      color: defaultlinecolor,  
      lineWidth: 2
    },  
    //Native canvas text styling  
    Label: {  
      type: 'Native', //Native or HTML  
      size: 10,  
      style: 'bold',
      color: '#000' 
    },  
    //Add Tips  
    Tips: {  
      enable: true,  
      // onShow: function(tip, node) {  
      //   //count connections  
      //   var count = 0;  
      //   //display node info in tooltip  
      //   tip.innerHTML = "<div class=\"tip-title\">" + node.name + "</div>"; 
      // }
    },  
    // Add node events  
    Events: {  
      enable: true,  
      type: 'Native',  
      //Change cursor style when hovering a node  
      onMouseEnter: function(node, eventInfo, e) {
        // console.log(node);
        if(node.id!=root){
          fd.canvas.getElement().style.cursor = 'pointer';
        }
        if(node){
          node.eachAdjacency(function(adj) {
            adj.setDataset('end', {
              lineWidth: 3
            });
            if(adj.nodeTo.data.tipe!=0){
              adj.nodeTo.setLabelData('size', 12, 'end');
            }
          });
          fd.fx.animate({
            modes: ['edge-property:lineWidth','label-property:size'],
            duration: 0
          });      
        }
      },  
      onMouseLeave: function(node, eventInfo, e) {
        fd.canvas.getElement().style.cursor = '';  
        $.each(fd.graph.nodes,function(index,item){
          item.eachAdjacency(function(adj) { 
            adj.setDataset('end', {
              lineWidth: 1
            });
            if(adj.nodeTo.data.tipe!=0){
              adj.nodeTo.setLabelData('size', 10, 'end');
            }
          });
        });  
        fd.fx.animate({
          modes: ['edge-property:lineWidth:color','label-property:size'],
          duration: 0
        });      
      },  
      //Update node positions when dragged  
      onDragMove: function(node, eventInfo, e) {  
          var pos = eventInfo.getPos();  
          node.pos.setc(pos.x, pos.y);  
          fd.plot();  
      },  
      //Implement the same handler for touchscreens  
      onTouchMove: function(node, eventInfo, e) {  
        $jit.util.event.stop(e); //stop default touchmove event  
        this.onDragMove(node, eventInfo, e);  
      },  
      //Add also a click handler to nodes  
      onClick: function(node) {  
        if(!node) return;
        if(node.id==fd.root) return;
        $("#MaskingGraph").show();
        $("#leftSideBarGraph").html("");
        $("#static-page .title").html("&nbsp;");
        $('#graph .toolbar input:radio[name=filtergraph]')[0].checked = true;
        app.refreshCiteGraph(fd,node.id.replace("node",""),0);
      }  
    },  
    //Number of iterations for the FD algorithm  
    iterations: 200,  
    //Edge length  
    levelDistance: 130,  
    // Add text to the labels. This method is only triggered  
    // on label creation and only for DOM labels (not native canvas ones).  
    onCreateLabel: function(domElement, node){  
      domElement.innerHTML = node.name;  
      var style = domElement.style;  
      style.fontSize = "0.8em";  
      style.color = "#ccc";  
    },  
    // Change node styles when DOM labels are placed  
    // or moved.  
    onPlaceLabel: function(domElement, node){  
      var style = domElement.style;  
      var left = parseInt(style.left);  
      var top = parseInt(style.top);  
      var w = domElement.offsetWidth;  
      style.left = (left - w / 2) + 'px';  
      style.top = (top + 10) + 'px';  
      style.display = '';  
    }  
  });  
  // load JSON data.
  fd.loadJSON(json);  
  // compute positions incrementally and animate.  
  // fd.root=root;
  fd.computeIncremental({  
    iter: 40,  
    property: 'end',  
    onStep: function(perc){
      console.log(perc + '% loaded...');  
    },  
    onComplete: function(){ 
      fd.animate({  
        modes: ['linear'],  
        transition: $jit.Trans.Quart.easeIn,
        duration: 500,  
        onComplete:function(){
          $("#MaskingGraph").hide();
        }
      });
      // fd.animate({
      //   transition: $jit.Trans.Expo.easeInOut,  
      //   duration: 2500,
      //   onComplete:function(){
      //     $("#MaskingGraph").hide();
      //   }
      // });
      // fd.refresh();
      // $("#MaskingGraph").hide();
      // fd.canvas.scale(1.3,1.3);
    }  
  });
  {/literal}
</script>
{include file="footer.phtml"}